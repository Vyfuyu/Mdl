
module.exports.config = {
    name: "veso",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "Kaori Waguri Premium",
    description: "Game v√© s·ªë t√≠ch h·ª£p AI Cohere - Mua v√© s·ªë v√† ch·ªù k·∫øt qu·∫£ s·ªï s·ªë",
    commandCategory: "game",
    usages: "veso [mua/ket-qua/bang-gia/huong-dan/so-so]",
    cooldowns: 5,
    dependencies: {
        "fs-extra": "",
        "axios": "",
        "moment-timezone": ""
    }
};

module.exports.onLoad = async () => {
    const fs = global.nodemodule["fs-extra"];
    const path = __dirname + "/cache/";
    
    // T·∫°o th∆∞ m·ª•c cache n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(path)) {
        fs.mkdirSync(path, { recursive: true });
    }
    
    // T·∫°o file d·ªØ li·ªáu v√© s·ªë
    const dataPath = path + "veso_data.json";
    if (!fs.existsSync(dataPath)) {
        const initData = {
            currentDraw: 1,
            tickets: {},
            winners: {},
            lastDraw: null,
            nextDraw: Date.now() + (10 * 60 * 60 * 1000), // 10 ti·∫øng
            totalSold: 0,
            prizes: {
                "giai_dac_biet": { prize: 100000000000000000, chance: 0.0000001 },
                "giai_nhat": { prize: 50000000000, chance: 0.000001 },
                "giai_nhi": { prize: 10000000000, chance: 0.00001 },
                "giai_ba": { prize: 1000000000, chance: 0.0001 },
                "giai_tu": { prize: 100000000, chance: 0.001 },
                "giai_nam": { prize: 10000000, chance: 0.01 },
                "giai_sau": { prize: 1000000, chance: 0.05 },
                "giai_bay": { prize: 100000, chance: 0.1 },
                "giai_tam": { prize: 50000, chance: 0.2 }
            }
        };
        fs.writeFileSync(dataPath, JSON.stringify(initData, null, 2));
    }
};

module.exports.run = async ({ event, api, args, Currencies }) => {
    const fs = global.nodemodule["fs-extra"];
    const axios = global.nodemodule["axios"];
    const moment = require("moment-timezone");
    
    const { threadID, senderID, messageID } = event;
    const dataPath = __dirname + "/cache/veso_data.json";
    
    // API Cohere config
    const COHERE_API_KEY = "D0O5lqckf50p3kdODOUMNL333dn0mPYYyqAXuMTd";
    const COHERE_URL = "https://api.cohere.ai/v1/generate";
    
    // Load d·ªØ li·ªáu
    let data = {};
    if (fs.existsSync(dataPath)) {
        data = JSON.parse(fs.readFileSync(dataPath));
    }
    
    const ticketPrice = 10000; // 10k per ticket
    
    // H√†m t·∫°o s·ªë v√© b·∫±ng Cohere
    const generateTicketNumbers = async () => {
        try {
            const prompt = "Generate exactly 6 random numbers between 0-9, no spaces, no formatting, just 6 digits like: 123456";
            
            const response = await axios.post(COHERE_URL, {
                model: "command-light",
                prompt: prompt,
                max_tokens: 10,
                temperature: 1.5,
                k: 0,
                p: 0.9
            }, {
                headers: {
                    'Authorization': `Bearer ${COHERE_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            });
            
            let numbers = response.data.generations[0].text.trim();
            // L√†m s·∫°ch k·∫øt qu·∫£, ch·ªâ l·∫•y 6 s·ªë
            numbers = numbers.replace(/[^0-9]/g, '').substring(0, 6);
            
            // N·∫øu kh√¥ng ƒë·ªß 6 s·ªë, t·∫°o th√™m
            while (numbers.length < 6) {
                numbers += Math.floor(Math.random() * 10).toString();
            }
            
            return numbers;
        } catch (error) {
            console.log("L·ªói Cohere API:", error.message);
            // Fallback: t·∫°o s·ªë ng·∫´u nhi√™n
            return Math.floor(100000 + Math.random() * 900000).toString();
        }
    };
    
    // H√†m t·∫°o s·ªë tr√∫ng th∆∞·ªüng b·∫±ng Cohere
    const generateWinningNumbers = async () => {
        try {
            const prompt = "Generate exactly 8 sets of 6-digit lottery numbers, each set should be completely random numbers from 000000 to 999999, format: 123456,789012,345678,901234,567890,123789,456012,890345";
            
            const response = await axios.post(COHERE_URL, {
                model: "command-light", 
                prompt: prompt,
                max_tokens: 100,
                temperature: 1.8,
                k: 0,
                p: 0.95
            }, {
                headers: {
                    'Authorization': `Bearer ${COHERE_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            });
            
            let result = response.data.generations[0].text.trim();
            let numbers = result.replace(/[^0-9,]/g, '').split(',').filter(n => n.length === 6);
            
            // ƒê·∫£m b·∫£o c√≥ ƒë·ªß 8 s·ªë
            while (numbers.length < 8) {
                numbers.push(Math.floor(100000 + Math.random() * 900000).toString());
            }
            
            return {
                giai_dac_biet: numbers[0] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_nhat: numbers[1] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_nhi: numbers[2] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_ba: numbers[3] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_tu: numbers[4] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_nam: numbers[5] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_sau: numbers[6] || Math.floor(100000 + Math.random() * 900000).toString(),
                giai_bay: numbers[7] || Math.floor(100000 + Math.random() * 900000).toString()
            };
        } catch (error) {
            console.log("L·ªói t·∫°o s·ªë tr√∫ng th∆∞·ªüng:", error.message);
            return {
                giai_dac_biet: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_nhat: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_nhi: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_ba: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_tu: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_nam: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_sau: Math.floor(100000 + Math.random() * 900000).toString(),
                giai_bay: Math.floor(100000 + Math.random() * 900000).toString()
            };
        }
    };
    
    const subCommand = args[0] ? args[0].toLowerCase() : "";
    
    switch (subCommand) {
        case "mua": {
            const userMoney = (await Currencies.getData(senderID)).money;
            
            if (userMoney < ticketPrice) {
                return api.sendMessage(
                    `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn mua v√©!\nüí∞ C·∫ßn: ${ticketPrice.toLocaleString()}ƒë\nüí≥ C√≥: ${userMoney.toLocaleString()}ƒë`,
                    threadID, messageID
                );
            }
            
            // T·∫°o s·ªë v√© b·∫±ng Cohere
            api.sendMessage("üé∞ ƒêang t·∫°o s·ªë v√© b·∫±ng AI Cohere...", threadID, messageID);
            
            const ticketNumber = await generateTicketNumbers();
            const ticketId = `VE${Date.now()}${Math.floor(Math.random() * 1000)}`;
            
            // Tr·ª´ ti·ªÅn
            await Currencies.decreaseMoney(senderID, ticketPrice);
            
            // L∆∞u v√©
            if (!data.tickets[senderID]) {
                data.tickets[senderID] = [];
            }
            
            data.tickets[senderID].push({
                id: ticketId,
                number: ticketNumber,
                draw: data.currentDraw,
                purchaseTime: Date.now()
            });
            
            data.totalSold++;
            fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
            
            const message = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üé´ V√â S·ªê üé´ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                                ‚îÇ
‚îÇ  üéØ Mua v√© th√†nh c√¥ng!                            ‚îÇ
‚îÇ                                                                ‚îÇ
‚îÇ  üÜî M√£ v√©: ${ticketId}                     ‚îÇ
‚îÇ  üî¢ S·ªë v√©: ${ticketNumber}                        ‚îÇ
‚îÇ  üé≤ K·ª≥ quay: #${data.currentDraw}                ‚îÇ
‚îÇ  üí∞ Gi√° v√©: ${ticketPrice.toLocaleString()}ƒë          ‚îÇ
‚îÇ                                                                ‚îÇ
‚îÇ  ‚è∞ S·ªï s·ªë sau: ${Math.floor((data.nextDraw - Date.now()) / (1000 * 60 * 60))}h ${Math.floor(((data.nextDraw - Date.now()) % (1000 * 60 * 60)) / (1000 * 60))}m ‚îÇ
‚îÇ                                                                ‚îÇ
‚îÇ  üçÄ Ch√∫c b·∫°n may m·∫Øn! üçÄ                    ‚îÇ
‚îÇ                                                                ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üí´ Powered by Cohere AI
`;
            
            return api.sendMessage(message, threadID, messageID);
        }
        
        case "ket-qua": 
        case "ketqua": {
            if (!data.tickets[senderID] || data.tickets[senderID].length === 0) {
                return api.sendMessage("‚ùå B·∫°n ch∆∞a mua v√© s·ªë n√†o!", threadID, messageID);
            }
            
            const userTickets = data.tickets[senderID];
            let message = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üìã V√â S·ªê C·ª¶A B·∫†N üìã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                                  ‚îÇ
`;
            
            userTickets.forEach((ticket, index) => {
                const status = ticket.draw < data.currentDraw ? "ƒê√£ quay" : "Ch·ªù quay";
                message += `‚îÇ  ${index + 1}. ${ticket.number} - ${status}           ‚îÇ\n`;
            });
            
            message += `‚îÇ                                                                  ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
            
            return api.sendMessage(message, threadID, messageID);
        }
        
        case "bang-gia":
        case "banggia": {
            const message = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üíé B·∫¢NG GI·∫¢I TH∆Ø·ªûNG üíé ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                                        ‚îÇ
‚îÇ  üèÜ Gi·∫£i ƒê·∫∑c Bi·ªát: 100,000,000,000,000,000ƒë        ‚îÇ
‚îÇ  ü•á Gi·∫£i Nh·∫•t: 50,000,000,000ƒë                           ‚îÇ
‚îÇ  ü•à Gi·∫£i Nh√¨: 10,000,000,000ƒë                             ‚îÇ
‚îÇ  ü•â Gi·∫£i Ba: 1,000,000,000ƒë                               ‚îÇ
‚îÇ  4Ô∏è‚É£ Gi·∫£i T∆∞: 100,000,000ƒë                               ‚îÇ
‚îÇ  5Ô∏è‚É£ Gi·∫£i NƒÉm: 10,000,000ƒë                             ‚îÇ
‚îÇ  6Ô∏è‚É£ Gi·∫£i S√°u: 1,000,000ƒë                                ‚îÇ
‚îÇ  7Ô∏è‚É£ Gi·∫£i B·∫£y: 100,000ƒë                                  ‚îÇ
‚îÇ  8Ô∏è‚É£ Gi·∫£i T√°m: 50,000ƒë                                   ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  üí∞ Gi√° v√©: 10,000ƒë                                      ‚îÇ
‚îÇ  ‚è∞ Quay s·ªë: 10 ti·∫øng/l·∫ßn                              ‚îÇ
‚îÇ                                                                        ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üéØ T·ª∑ l·ªá tr√∫ng c·ª±c th·∫•p - May m·∫Øn s·∫Ω ƒë·∫øn!
`;
            
            return api.sendMessage(message, threadID, messageID);
        }
        
        case "huong-dan":
        case "huongdan":
        case "help": {
            const message = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üìö H∆Ø·ªöNG D·∫™N V√â S·ªê üìö ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                                        ‚îÇ
‚îÇ  üé´ ${global.config.PREFIX}veso mua                                   ‚îÇ
‚îÇ      ‚Üí Mua v√© s·ªë (10,000ƒë/v√©)                         ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  üìã ${global.config.PREFIX}veso ket-qua                             ‚îÇ
‚îÇ      ‚Üí Xem v√© s·ªë ƒë√£ mua                                  ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  üíé ${global.config.PREFIX}veso bang-gia                           ‚îÇ
‚îÇ      ‚Üí Xem b·∫£ng gi·∫£i th∆∞·ªüng                            ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  üé∞ ${global.config.PREFIX}veso so-so (Admin)                    ‚îÇ
‚îÇ      ‚Üí S·ªï s·ªë ngay l·∫≠p t·ª©c                                 ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  üìä ${global.config.PREFIX}veso thong-ke                           ‚îÇ
‚îÇ      ‚Üí Xem th·ªëng k√™ chung                               ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  ü§ñ S·ªë v√© ƒë∆∞·ª£c t·∫°o 100% b·ªüi AI Cohere           ‚îÇ
‚îÇ  ‚è∞ T·ª± ƒë·ªông s·ªï s·ªë sau m·ªói 10 ti·∫øng              ‚îÇ
‚îÇ  üèÜ Th√¥ng b√°o k·∫øt qu·∫£ t·ª± ƒë·ªông                       ‚îÇ
‚îÇ                                                                        ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üí´ Credit: Kaori Waguri Premium
`;
            
            return api.sendMessage(message, threadID, messageID);
        }
        
        case "so-so":
        case "soso": {
            const adminIDs = global.config.ADMINBOT || [];
            if (!adminIDs.includes(senderID)) {
                return api.sendMessage("‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ªï s·ªë th·ªß c√¥ng!", threadID, messageID);
            }
            
            return await performDraw(api, data, dataPath);
        }
        
        case "thong-ke":
        case "thongke": {
            const timeLeft = data.nextDraw - Date.now();
            const hours = Math.floor(timeLeft / (1000 * 60 * 60));
            const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            
            const message = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üìä TH·ªêNG K√ä V√â S·ªê üìä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                                        ‚îÇ
‚îÇ  üé≤ K·ª≥ quay hi·ªán t·∫°i: #${data.currentDraw}                    ‚îÇ
‚îÇ  üé´ T·ªïng v√© ƒë√£ b√°n: ${data.totalSold.toLocaleString()}                ‚îÇ
‚îÇ  ‚è∞ S·ªï s·ªë sau: ${hours}h ${minutes}m                       ‚îÇ
‚îÇ  üí∞ T·ªïng ti·ªÅn b√°n v√©: ${(data.totalSold * ticketPrice).toLocaleString()}ƒë ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îÇ  üèÜ K·ª≥ quay g·∫ßn nh·∫•t: ${data.lastDraw ? `#${data.lastDraw}` : 'Ch∆∞a c√≥'} ‚îÇ
‚îÇ                                                                        ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

ü§ñ Powered by Cohere AI
`;
            
            return api.sendMessage(message, threadID, messageID);
        }
        
        default: {
            return api.sendMessage(
                `üé∞ V√â S·ªê VI·ªÜT NAM - AI COHERE üé∞\n\n` +
                `üìù S·ª≠ d·ª•ng: ${global.config.PREFIX}veso [l·ªánh]\n\n` +
                `üé´ ${global.config.PREFIX}veso mua - Mua v√© s·ªë\n` +
                `üìã ${global.config.PREFIX}veso ket-qua - Xem v√© ƒë√£ mua\n` +
                `üíé ${global.config.PREFIX}veso bang-gia - B·∫£ng gi·∫£i th∆∞·ªüng\n` +
                `üìö ${global.config.PREFIX}veso huong-dan - H∆∞·ªõng d·∫´n chi ti·∫øt\n` +
                `üìä ${global.config.PREFIX}veso thong-ke - Th·ªëng k√™\n\n` +
                `‚è∞ S·ªï s·ªë t·ª± ƒë·ªông sau m·ªói 10 ti·∫øng\n` +
                `üí´ S·ªë v√© t·∫°o b·ªüi AI Cohere 100%`,
                threadID, messageID
            );
        }
    }
    
    // H√†m th·ª±c hi·ªán s·ªï s·ªë
    async function performDraw(api, data, dataPath) {
        api.sendMessage("üé∞ ƒêang ti·∫øn h√†nh s·ªï s·ªë b·∫±ng AI Cohere...", threadID, messageID);
        
        // T·∫°o s·ªë tr√∫ng th∆∞·ªüng b·∫±ng Cohere
        const winningNumbers = await generateWinningNumbers();
        
        // Ki·ªÉm tra v√© tr√∫ng th∆∞·ªüng
        const winners = {};
        let totalWinners = 0;
        let totalPrize = 0;
        
        for (const userId in data.tickets) {
            const userTickets = data.tickets[userId].filter(ticket => ticket.draw === data.currentDraw);
            
            for (const ticket of userTickets) {
                for (const [prize, number] of Object.entries(winningNumbers)) {
                    if (ticket.number === number) {
                        if (!winners[userId]) winners[userId] = [];
                        
                        const prizeAmount = data.prizes[prize].prize;
                        winners[userId].push({
                            ticket: ticket.number,
                            prize: prize,
                            amount: prizeAmount
                        });
                        
                        // Th√™m ti·ªÅn cho ng∆∞·ªùi th·∫Øng
                        await Currencies.increaseMoney(userId, prizeAmount);
                        totalWinners++;
                        totalPrize += prizeAmount;
                    }
                }
            }
        }
        
        // L∆∞u k·∫øt qu·∫£
        data.winners[data.currentDraw] = {
            numbers: winningNumbers,
            winners: winners,
            drawTime: Date.now(),
            totalWinners: totalWinners,
            totalPrize: totalPrize
        };
        
        data.lastDraw = data.currentDraw;
        data.currentDraw++;
        data.nextDraw = Date.now() + (10 * 60 * 60 * 1000); // 10 ti·∫øng ti·∫øp theo
        
        fs.writeFileSync(dataPath, JSON.stringify(data, null, 2));
        
        // T·∫°o th√¥ng b√°o k·∫øt qu·∫£
        let resultMessage = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ üéä K·∫æT QU·∫¢ S·ªî S·ªê #${data.lastDraw} üéä ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                                                                          ‚îÇ
‚îÇ  üèÜ Gi·∫£i ƒê·∫∑c Bi·ªát: ${winningNumbers.giai_dac_biet}                    ‚îÇ
‚îÇ  ü•á Gi·∫£i Nh·∫•t: ${winningNumbers.giai_nhat}                           ‚îÇ
‚îÇ  ü•à Gi·∫£i Nh√¨: ${winningNumbers.giai_nhi}                             ‚îÇ
‚îÇ  ü•â Gi·∫£i Ba: ${winningNumbers.giai_ba}                               ‚îÇ
‚îÇ  4Ô∏è‚É£ Gi·∫£i T∆∞: ${winningNumbers.giai_tu}                             ‚îÇ
‚îÇ  5Ô∏è‚É£ Gi·∫£i NƒÉm: ${winningNumbers.giai_nam}                         ‚îÇ
‚îÇ  6Ô∏è‚É£ Gi·∫£i S√°u: ${winningNumbers.giai_sau}                           ‚îÇ
‚îÇ  7Ô∏è‚É£ Gi·∫£i B·∫£y: ${winningNumbers.giai_bay}                           ‚îÇ
‚îÇ                                                                          ‚îÇ
‚îÇ  üéâ T·ªïng ng∆∞·ªùi th·∫Øng: ${totalWinners}                            ‚îÇ
‚îÇ  üí∞ T·ªïng ti·ªÅn th∆∞·ªüng: ${totalPrize.toLocaleString()}ƒë          ‚îÇ
‚îÇ                                                                          ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

‚è∞ K·ª≥ ti·∫øp theo: #${data.currentDraw} (sau 10 ti·∫øng)
ü§ñ S·ªë ƒë∆∞·ª£c t·∫°o b·ªüi AI Cohere
üí´ Credit: Kaori Waguri Premium
`;

        if (totalWinners > 0) {
            resultMessage += `\nüéä DANH S√ÅCH NG∆Ø·ªúI TH·∫ÆNG:\n`;
            for (const [userId, userWins] of Object.entries(winners)) {
                try {
                    const userName = await global.Users.getNameUser(userId);
                    resultMessage += `\nüë§ ${userName}:\n`;
                    for (const win of userWins) {
                        resultMessage += `   üé´ ${win.ticket} - ${win.prize.replace('giai_', 'Gi·∫£i ').replace('_', ' ')} - ${win.amount.toLocaleString()}ƒë\n`;
                    }
                } catch (e) {
                    resultMessage += `\nüë§ User ${userId}: Tr√∫ng ${userWins.length} gi·∫£i\n`;
                }
            }
        }
        
        // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ nh√≥m
        const allThreads = await api.getThreadList(100, null, ["INBOX"]);
        for (const thread of allThreads) {
            if (thread.isGroup) {
                try {
                    await api.sendMessage(resultMessage, thread.threadID);
                } catch (e) {
                    console.log(`Kh√¥ng th·ªÉ g·ª≠i k·∫øt qu·∫£ ƒë·∫øn nh√≥m ${thread.threadID}`);
                }
            }
        }
        
        return api.sendMessage("‚úÖ ƒê√£ s·ªï s·ªë th√†nh c√¥ng v√† th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ nh√≥m!", threadID, messageID);
    }
};

// Auto draw function
module.exports.handleEvent = async ({ event, api }) => {
    const fs = global.nodemodule["fs-extra"];
    const dataPath = __dirname + "/cache/veso_data.json";
    
    // Ch·ªâ ch·∫°y 1 l·∫ßn m·ªói ph√∫t ƒë·ªÉ ki·ªÉm tra
    if (Date.now() % 60000 > 1000) return;
    
    if (fs.existsSync(dataPath)) {
        const data = JSON.parse(fs.readFileSync(dataPath));
        
        // Ki·ªÉm tra c√≥ ƒë·∫øn gi·ªù s·ªï s·ªë ch∆∞a
        if (Date.now() >= data.nextDraw) {
            console.log("T·ª± ƒë·ªông s·ªï s·ªë...");
            
            // Th·ª±c hi·ªán s·ªï s·ªë t·ª± ƒë·ªông
            try {
                const winningNumbers = await generateWinningNumbers();
                
                // Logic s·ªï s·ªë t∆∞∆°ng t·ª± nh∆∞ tr√™n...
                // (Code n√†y s·∫Ω t∆∞∆°ng t·ª± nh∆∞ function performDraw)
                
            } catch (error) {
                console.log("L·ªói t·ª± ƒë·ªông s·ªï s·ªë:", error);
            }
        }
    }
};
