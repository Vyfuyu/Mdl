
module.exports.config = {
    name: "ghepdoi",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "Assistant",
    description: "Gh√©p ƒë√¥i ng·∫´u nhi√™n v·ªõi th√†nh vi√™n t·ª´ c√°c nh√≥m kh√°c",
    commandCategory: "gi·∫£i tr√≠",
    usages: "ghepdoi",
    cooldowns: 30,
    dependencies: {
        "fs-extra": "",
        "axios": ""
    }
};

module.exports.run = async ({ event, api, Users }) => {
    const fs = global.nodemodule["fs-extra"];
    const { threadID, senderID, messageID } = event;
    
    try {
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const senderInfo = await api.getUserInfo(senderID);
        const senderName = senderInfo[senderID].name;
        const senderGender = senderInfo[senderID].gender;
        const senderProfile = `https://facebook.com/${senderID}`;
        
        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c thread m√† bot ƒëang tham gia
        const threadList = await api.getThreadList(100, null, ["INBOX"]);
        const allThreads = threadList.filter(thread => 
            thread.isGroup && 
            thread.threadID !== threadID && 
            thread.participants && 
            thread.participants.length > 0
        );
        
        if (allThreads.length === 0) {
            return api.sendMessage("‚ùå Bot ch∆∞a tham gia nh√≥m n√†o kh√°c ƒë·ªÉ gh√©p ƒë√¥i!", threadID, messageID);
        }
        
        api.sendMessage("üîç ƒêang t√¨m ki·∫øm ng∆∞·ªùi ph√π h·ª£p t·ª´ c√°c nh√≥m kh√°c...", threadID, messageID);
        
        // Thu th·∫≠p t·∫•t c·∫£ th√†nh vi√™n t·ª´ c√°c nh√≥m kh√°c
        let allMembers = [];
        
        for (const thread of allThreads) {
            try {
                const threadInfo = await api.getThreadInfo(thread.threadID);
                const participants = threadInfo.participantIDs.filter(id => 
                    id !== api.getCurrentUserID() && 
                    id !== senderID
                );
                
                for (const participantID of participants) {
                    allMembers.push({
                        userID: participantID,
                        threadID: thread.threadID,
                        threadName: thread.name || "Nh√≥m chat"
                    });
                }
            } catch (e) {
                console.log(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thread ${thread.threadID}`);
            }
        }
        
        if (allMembers.length === 0) {
            return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o t·ª´ c√°c nh√≥m kh√°c!", threadID, messageID);
        }
        
        // Ch·ªçn ng·∫´u nhi√™n m·ªôt th√†nh vi√™n
        const randomMember = allMembers[Math.floor(Math.random() * allMembers.length)];
        
        // L·∫•y th√¥ng tin c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c gh√©p ƒë√¥i
        const partnerInfo = await api.getUserInfo(randomMember.userID);
        const partnerData = partnerInfo[randomMember.userID];
        const partnerName = partnerData.name;
        const partnerGender = partnerData.gender;
        const partnerProfile = `https://facebook.com/${randomMember.userID}`;
        
        // X√°c ƒë·ªãnh gi·ªõi t√≠nh
        const getGenderText = (gender) => {
            switch(gender) {
                case 1: return "üë© N·ªØ";
                case 2: return "üë® Nam";
                default: return "‚ùì Kh√¥ng x√°c ƒë·ªãnh";
            }
        };
        
        // T·∫°o tin nh·∫Øn th√¥ng b√°o gh√©p ƒë√¥i th√†nh c√¥ng
        const successMessage = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ    üíï GH√âP ƒê√îI TH√ÄNH C√îNG üíï    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c gh√©p ƒë√¥i th√†nh c√¥ng!

üë§ TH√îNG TIN C·ª¶A B·∫†N:
   üìù T√™n: ${senderName}
   ${getGenderText(senderGender)}
   üîó Facebook: ${senderProfile}

üíë ƒê·ªêI T√ÅC C·ª¶A B·∫†N:
   üìù T√™n: ${partnerName}
   ${getGenderText(partnerGender)}
   üè† T·ª´ nh√≥m: ${randomMember.threadName}
   üîó Facebook: ${partnerProfile}

üíå H√£y nh·∫•n v√†o link Facebook ƒë·ªÉ k·∫øt b·∫°n v√† tr√≤ chuy·ªán nh√©!

‚≠ê Ch√∫c hai b·∫°n c√≥ nh·ªØng kho·∫£nh kh·∫Øc vui v·∫ª b√™n nhau! ‚≠ê
`;

        // T·∫°o tin nh·∫Øn cho ƒë·ªëi t√°c
        const partnerMessage = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ    üíï TH√îNG B√ÅO GH√âP ƒê√îI üíï    ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ

üéâ Ch√†o ${partnerName}! B·∫°n v·ª´a ƒë∆∞·ª£c gh√©p ƒë√¥i!

üíë ƒê·ªêI T√ÅC C·ª¶A B·∫†N:
   üìù T√™n: ${senderName}
   ${getGenderText(senderGender)}
   üè† T·ª´ nh√≥m: ${(await api.getThreadInfo(threadID)).threadName || "Nh√≥m chat"}
   üîó Facebook: ${senderProfile}

üë§ TH√îNG TIN C·ª¶A B·∫†N:
   üìù T√™n: ${partnerName}
   ${getGenderText(partnerGender)}
   üîó Facebook: ${partnerProfile}

üíå H√£y nh·∫•n v√†o link Facebook ƒë·ªÉ k·∫øt b·∫°n v√† tr√≤ chuy·ªán nh√©!

‚≠ê Ch√∫c hai b·∫°n c√≥ nh·ªØng kho·∫£nh kh·∫Øc vui v·∫ª b√™n nhau! ‚≠ê
`;

        // G·ª≠i tin nh·∫Øn cho ng∆∞·ªùi y√™u c·∫ßu gh√©p ƒë√¥i
        api.sendMessage(successMessage, threadID, messageID);
        
        // G·ª≠i tin nh·∫Øn ri√™ng cho ƒë·ªëi t√°c ƒë∆∞·ª£c gh√©p ƒë√¥i
        setTimeout(() => {
            api.sendMessage(partnerMessage, randomMember.threadID);
        }, 2000);
        
        // L∆∞u log gh√©p ƒë√¥i
        const logPath = __dirname + "/cache/ghepdoi_log.json";
        let logData = {};
        
        if (fs.existsSync(logPath)) {
            logData = JSON.parse(fs.readFileSync(logPath));
        }
        
        const timestamp = new Date().toLocaleString("vi-VN");
        const logEntry = {
            timestamp,
            user1: { id: senderID, name: senderName, thread: threadID },
            user2: { id: randomMember.userID, name: partnerName, thread: randomMember.threadID }
        };
        
        if (!logData.matches) logData.matches = [];
        logData.matches.push(logEntry);
        
        // Gi·ªØ l·∫°i 100 l·∫ßn gh√©p ƒë√¥i g·∫ßn nh·∫•t
        if (logData.matches.length > 100) {
            logData.matches = logData.matches.slice(-100);
        }
        
        fs.writeFileSync(logPath, JSON.stringify(logData, null, 2));
        
    } catch (error) {
        console.log("L·ªói gh√©p ƒë√¥i:", error);
        return api.sendMessage(`‚ùå C√≥ l·ªói x·∫£y ra: ${error.message}`, threadID, messageID);
    }
};
