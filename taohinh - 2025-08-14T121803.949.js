
module.exports.config = {
  name: "taohinh",
  version: "1.0.0",
  hasPermssion: 0,
  credits: "Kaori Waguri",
  description: "T·∫°o ·∫£nh b·∫±ng AI v·ªõi Stability AI - H·ªó tr·ª£ t·ª± ƒë·ªông d·ªãch t·ª´ ti·∫øng Vi·ªát sang ti·∫øng Anh",
  commandCategory: "Ti·ªán √≠ch",
  usages: "taohinh <m√¥ t·∫£ ·∫£nh>",
  cooldowns: 10,
  images: [],
};

const axios = require("axios");
const fs = require("fs");
const path = require("path");

// Stability AI Configuration
const STABILITY_API = "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image";
const STABILITY_API_KEY = "sk-Tf24cSgoHKadLSOzXlFsfYCjDguSwQoYgkIQetRPR5KPNydN";

// Google Translate API (free endpoint)
async function translateToEnglish(text) {
  try {
    const response = await axios.get(`https://translate.googleapis.com/translate_a/single?client=gtx&sl=vi&tl=en&dt=t&q=${encodeURIComponent(text)}`);
    
    if (response.data && response.data[0] && response.data[0][0] && response.data[0][0][0]) {
      return response.data[0][0][0];
    }
    
    return text; // Fallback to original text if translation fails
  } catch (error) {
    console.error("Translation error:", error);
    return text; // Fallback to original text
  }
}

// Detect if text contains Vietnamese characters
function isVietnamese(text) {
  const vietnamesePattern = /[√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i;
  return vietnamesePattern.test(text);
}

// Generate image with Stability AI
async function generateImage(prompt) {
  try {
    const response = await axios.post(STABILITY_API, {
      text_prompts: [
        {
          text: prompt,
          weight: 1
        }
      ],
      cfg_scale: 7,
      height: 1024,
      width: 1024,
      samples: 1,
      steps: 30,
      style_preset: "enhance"
    }, {
      headers: {
        'Authorization': `Bearer ${STABILITY_API_KEY}`,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    return response.data;
  } catch (error) {
    console.error("Stability AI Error:", error.response?.data || error.message);
    throw new Error(`L·ªói t·∫°o ·∫£nh: ${error.response?.data?.message || error.message}`);
  }
}

module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID, senderID } = event;

  if (args.length === 0) {
    return api.sendMessage(
      `üé® T·∫†O ·∫¢NH AI - KAORI WAGURI\n\n` +
      `üìã C√°ch s·ª≠ d·ª•ng:\n` +
      `‚Ä¢ ${this.config.name} <m√¥ t·∫£ ·∫£nh>\n\n` +
      `üí° V√≠ d·ª•:\n` +
      `‚Ä¢ ${this.config.name} c√¥ g√°i anime t√≥c xanh\n` +
      `‚Ä¢ ${this.config.name} beautiful sunset over mountains\n` +
      `‚Ä¢ ${this.config.name} robot trong th√†nh ph·ªë t∆∞∆°ng lai\n\n` +
      `üåê T·ª± ƒë·ªông d·ªãch ti·∫øng Vi·ªát sang ti·∫øng Anh\n` +
      `‚ö° Powered by Stability AI`,
      threadID, messageID
    );
  }

  const originalPrompt = args.join(" ");
  
  if (originalPrompt.length > 500) {
    return api.sendMessage("‚ùå M√¥ t·∫£ qu√° d√†i! Vui l√≤ng gi·ªõi h·∫°n d∆∞·ªõi 500 k√Ω t·ª±.", threadID, messageID);
  }

  try {
    // Send processing message
    api.sendMessage("üé® ƒêang t·∫°o ·∫£nh... Vui l√≤ng ƒë·ª£i 20-30 gi√¢y ‚è≥", threadID, messageID);

    let finalPrompt = originalPrompt;
    
    // Translate if Vietnamese is detected
    if (isVietnamese(originalPrompt)) {
      const translatedPrompt = await translateToEnglish(originalPrompt);
      finalPrompt = translatedPrompt;
      
      // Enhance prompt for better results
      finalPrompt = `${finalPrompt}, high quality, detailed, masterpiece, 8k resolution`;
    } else {
      // Enhance English prompts
      finalPrompt = `${originalPrompt}, high quality, detailed, masterpiece, 8k resolution`;
    }

    // Generate image
    const imageData = await generateImage(finalPrompt);
    
    if (!imageData.artifacts || imageData.artifacts.length === 0) {
      throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ·∫£nh t·ª´ API");
    }

    // Process the first image
    const artifact = imageData.artifacts[0];
    const imageBuffer = Buffer.from(artifact.base64, 'base64');
    
    // Save image to cache
    const imagePath = path.join(__dirname, 'cache', `stability_${Date.now()}_${senderID}.png`);
    
    // Ensure cache directory exists
    const cacheDir = path.dirname(imagePath);
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }
    
    fs.writeFileSync(imagePath, imageBuffer);

    // Send image with information
    const message = `‚úÖ T·∫†O ·∫¢NH TH√ÄNH C√îNG!\n\n` +
      `üéØ Prompt g·ªëc: ${originalPrompt}\n` +
      `üåê Prompt AI: ${finalPrompt}\n` +
      `ü§ñ Engine: Stability AI SDXL\n` +
      `üìä Resolution: 1024x1024\n` +
      `üëë Kaori Waguri Premium`;

    api.sendMessage({
      body: message,
      attachment: fs.createReadStream(imagePath)
    }, threadID, () => {
      // Clean up temp file
      fs.unlinkSync(imagePath);
    }, messageID);

  } catch (error) {
    console.error("Generate image error:", error);
    
    let errorMessage = "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o ·∫£nh!";
    
    if (error.message.includes("quota")) {
      errorMessage = "‚ùå ƒê√£ h·∫øt quota API! Vui l√≤ng th·ª≠ l·∫°i sau.";
    } else if (error.message.includes("safety")) {
      errorMessage = "‚ùå N·ªôi dung kh√¥ng ph√π h·ª£p! Vui l√≤ng th·ª≠ prompt kh√°c.";
    } else if (error.message.includes("network")) {
      errorMessage = "‚ùå L·ªói k·∫øt n·ªëi m·∫°ng! Vui l√≤ng th·ª≠ l·∫°i.";
    }

    api.sendMessage(`${errorMessage}\n\nüîß Chi ti·∫øt l·ªói: ${error.message}`, threadID, messageID);
  }
};
